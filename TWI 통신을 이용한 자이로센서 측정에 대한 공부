MPU6050에 대해 공부하기전, TWI(I2C) 통신에 대한 개념을 알아두어야함!

*TWI(I2C)- Two Wire Serial Interface 통신 (데이터선 한개 -> 반이중통신)
-SCL은 통신의 클락, SDA는 데이터선
 SCL이 HIGH상태일때 SDA는 같은 값 유지 ,LOW상태일때만 값 변경이 가능
 그러나 Start, Repeated start, Stop 신호는 SCL이 HIGH일때 변경하여 통신의 시작과 끝을 알림
 SCL이 high상태에서 SDA가 high에서 low로 상태가 바뀌게 되면 TWI 통신이 개시 된다는 것(Start)을 슬레이브로 알려주게 된다.
 이와 반대로 SCL이 high 상태에서 SDA가 low에서 high로 변경되면 TWI 통신이 끝났음(Stop)을 슬레이브로 알려 주는 것이다.

-읽기동작(슬레이브주소:0x52): 10100101 0xA5(거꾸로 1부터 받고 그다음 주소인 0100101 ->아트메가)    
  // 아트메가 관점에서 레지스터 1부터 전송받아 읽기동작을 인식하고 7비트 주소를 5(101)부터 읽어들임
 쓰기동작(슬레이브주소:0x52): 10100100 0xA4(거꾸로 0부터 받고 그다음 주소인 0100101 -> 아트메가)    // 꽤 헷갈림

-TWI 레지스터
 TWBR -> 통신속도 결정
 SCL frequency = 16M / (16+2*TWBR*4^TWPS)  TWPS는 일반적으로 0으로 하여 분주비를 1로 설정

***TWCR -> TWI 사용 여부와 TWI인터럽트 허용여부를 설정

  7	   6	    5	    4   	3	    2	    1	0
TWINT TWEA     TWSTA   TWSTO   TWWC    TWEN     -   TWIE

7: TWI가 동작완료했음을 알리는 플래그 '1'은 동작완료를 나타냄. 자동으로 clear 되지않기때문에 
   시작할때 clear해줘야함. clear 하려면 이 비트에 '1'을 write, 동작이 끝나면 하드웨어적으로 set됨.

5: TWI 통신을 수행하기 위해 버스가 유용 가능한 상태인지를 하드웨어가 체크하고 해당 bit가 1이 되면 start 신호를
   발생한다. 만일 버스상태가 free가 아니라면 TWI 하드웨어는 다음의 Stop 상태가 탐지될 때까지 기다렸다가 새로운
   Start 신호를 발생하게 된다. 이때 TWSTA bit는 Start 신호가 발생한 후에 소프트웨어적으로 클리어시켜줘야 함.

4: 마스터 모드에서 Stop 신호를 생성시키키 위하여 해당 비트에 1로 바꿈. 이후 자동으로 클리어됨

2: TWEN 비트에 1을 쓰면 TWI 작동이 가능. 클리어되면 TWI 통신이 불가능해짐.

**TWSR -> TWI 상태레지스터
3~7: TWI 버스의 상태를 나타냄. 3번비트가 0이여야 통신이 가능. 1이면 중단.

0~1: SCL 주파수 분주비를 결정. 보통 0으로 초기화 시켜 분주비 1로 동작시킴.

 TWDR -> 전송 또는 수신 시 데이터를 저장하는 레지스터 

 TWAR -> TWI통신은 보통 하나의 마스터가 여러개의 슬레이브와 통신을 하는데 이때 TWAR에
 슬레이브의 주소가 들어간다. 초기상태가 모든 슬레이브가 응답하도록 되어 있기 때문에 건들필요 x 


[MPU6050 - 자이로 가속도 센서]
자이로-> 각속도(물체가 얼마나 빨리 회전하고 있는지)를 측정
가속도-> 단위시간당 속도가 변화는 정도

Roll: 좌우 기울임정도
Pitch: 앞뒤 기울임 정도
Yaw: 수평 회전 

read(): 센서의 각속도 및 가속도 값을 읽어들임(라디안값으로 변환 필요)
Write() : 자이로 센서를 ON시키고 2g ~16g 결정
compFilter() : 자이로 센서의 적분 계산의 오차들이 누적되어 방향에 대한 표류 발생을 막아줌. 상보필터라고함
